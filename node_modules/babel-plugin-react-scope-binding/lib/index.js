'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _factory = require('./factory');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function plugin(_ref) {
  var t = _ref.types;

  return {
    visitor: {
      ClassDeclaration: function ClassDeclaration(classPath, _ref2) {
        var opts = _ref2.opts;

        var defaultOpts = {
          propPrefix: 'on',
          advanced: false
        },
            superClass = classPath.get('superClass'),
            addedEventNames = [];
        var bodyPaths = classPath.get('body').get('body');

        opts = (0, _extends3.default)({}, defaultOpts, opts);
        if (!superClass || !(0, _helpers.isReactClass)(superClass, classPath.scope)) {
          return;
        }
        if (!bodyPaths.some(function (bodyPath) {
          return bodyPath.isClassMethod({ kind: 'constructor' });
        })) {
          classPath.get('body').node.body.unshift((0, _factory.buildConstructor)(t));
          bodyPaths = classPath.get('body').get('body');
        }
        classPath.traverse({
          JSXAttribute: function JSXAttribute(path) {
            var _this = this;

            var eventName = void 0,
                JSXExpression = void 0;

            if (!(0, _helpers.isEventAttribute)(path, opts.propPrefix)) {
              return;
            }
            JSXExpression = path.get('value').get('expression');
            if (opts.advanced === true && (0, _helpers.isHandlerExpressionWithParams)(JSXExpression, t)) {
              var handler = JSXExpression.get('callee').get('property').node.name,
                  nodeArgs = JSXExpression.node.arguments;

              JSXExpression.replaceWith((0, _factory.buildArrowFunction)(t, handler, nodeArgs));

              return;
            }
            if (!(0, _helpers.isHandlerExpression)(path.get('value').get('expression'), t)) {
              return;
            }

            eventName = JSXExpression.get('property').node.name;
            if (~this.addedEventNames.indexOf(eventName)) {
              return;
            }
            if (bodyPaths.some(function (bodyPath) {
              return bodyPath.get('key').isIdentifier({ name: eventName });
            })) {
              bodyPaths.forEach(function (bodyPath) {
                if (bodyPath.isClassMethod({ kind: 'constructor' })) {
                  bodyPath.get('body').pushContainer('body', (0, _factory.buildBindingStatement)(t, eventName));
                  _this.addedEventNames.push(eventName);
                }
              });
            }
          }
        }, { addedEventNames: addedEventNames });
      }
    }
  };
}

exports.default = plugin;