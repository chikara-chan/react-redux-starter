'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findOwnerClassPath = findOwnerClassPath;
exports.isConstructor = isConstructor;
exports.isEventAttribute = isEventAttribute;
exports.isHandlerExpression = isHandlerExpression;
exports.isHandlerExpressionWithParams = isHandlerExpressionWithParams;
exports.isReactClass = isReactClass;
function findOwnerClassPath(path) {
  return path.findParent(function (path) {
    return path.isClassExpression();
  });
}

function isConstructor(path, t) {
  return t.isIdentifier(path.get('key').node, { name: 'constructor' });
}

// E.g. onClick={}
function isEventAttribute(path, propPrefix) {
  var ret = false;

  if (!path.get('name').isJSXIdentifier() || !path.get('value').isJSXExpressionContainer()) {
    return ret;
  }

  if (Array.isArray(propPrefix)) {
    ret = propPrefix.some(function (prefix) {
      var rName = new RegExp('^' + prefix);

      return rName.exec(path.get('name').node.name);
    });
  } else {
    var rName = new RegExp('^' + propPrefix);

    if (rName.exec(path.get('name').node.name)) {
      ret = true;
    }
  }

  return ret;
}

// E.g. onClick={this.handleClick}
function isHandlerExpression(path) {
  return path.isMemberExpression() && path.get('object').isThisExpression() && path.get('property').isIdentifier();
}

// E.g. onClick={this.handleClick(item)}
function isHandlerExpressionWithParams(path) {
  return path.isCallExpression() && isHandlerExpression(path.get('callee'));
}

function isPathReactClass(path) {
  if (path.matchesPattern('React.Component') || path.matchesPattern('React.PureComponent')) {
    return true;
  }

  if (path.node && (path.node.name === 'Component' || path.node.name === 'PureComponent')) {
    return true;
  }

  return false;
}

function isReactClass(superClass, scope) {
  var ret = false;

  if (isPathReactClass(superClass)) {
    ret = true;
  } else if (superClass.node.name) {
    var className = superClass.node.name,
        binding = scope.getBinding(className);

    if (!binding) {
      ret = false;
    } else {
      superClass = binding.path.get('superClass');

      if (isPathReactClass(superClass)) {
        ret = true;
      }
    }
  }

  return ret;
}